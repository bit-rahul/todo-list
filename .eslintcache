[{"C:\\Users\\rahul\\Desktop\\todo-list\\src\\index.js":"1","C:\\Users\\rahul\\Desktop\\todo-list\\src\\App.js":"2"},{"size":432,"mtime":1607873012366,"results":"3","hashOfConfig":"4"},{"size":7661,"mtime":1607882062190,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"2g466h",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\rahul\\Desktop\\todo-list\\src\\index.js",[],["12","13"],"C:\\Users\\rahul\\Desktop\\todo-list\\src\\App.js",["14","15"],"import React, { Component } from 'react';\nimport './App.css';\nimport Laptop from './Laptop.svg';\n\nexport default class App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      todos: JSON.parse(localStorage.getItem(\"r-todos\")) || {\n        complete: [],\n        incomplete: []\n      },\n      newTodo: \"\",\n      isDeleting: false,\n      isEditing: false,\n      modifyType: \"\",\n      deleteType: \"\",\n      modifyIndex: -1,\n      deleteIndex: -1\n    }\n  }\n\n  saveTodos = () => {\n    localStorage.setItem(\"r-todos\", JSON.stringify(this.state.todos))\n  }\n\n  addTodo = () => {\n    let { newTodo, todos } = this.state;\n    if (newTodo === \"\") return\n    todos.incomplete.push(newTodo);\n    this.setState({\n      todos,\n      newTodo: \"\"\n    },\n      () => this.saveTodos()\n    )\n  }\n\n  handleChange = (val, index) => {\n    let { todos } = this.state;\n    if (val === \"incomplete\") {\n      let removed = todos.incomplete[index]\n      todos.incomplete.splice(index, 1);\n      console.log(\"checkk\", removed)\n      todos.complete.push(removed);\n    } else if (val === \"complete\") {\n      let removed = todos.complete[index]\n      todos.complete.splice(index, 1);\n      console.log(\"checkk2\", removed)\n      todos.incomplete.push(removed);\n    }\n    this.setState({\n      todos\n    },\n      () => this.saveTodos()\n    )\n  }\n\n  openDelete = (val, index) => {\n    this.setState({\n      isDeleting: true,\n      deleteIndex: index,\n      deleteType: val\n    })\n  }\n\n  openEdit = (val, index) => {\n    this.setState({\n      isEditing: true,\n      modifyIndex: index,\n      modifyType: val\n    })\n  }\n\n  resetDeleteFields = () => {\n    this.setState({\n      isDeleting: false,\n      deleteIndex: -1,\n      deleteType: \"\"\n    })\n  }\n\n  resetEditFields = () => {\n    this.setState({\n      isEditing: false,\n      modifyIndex: -1,\n      modifyType: \"\"\n    })\n  }\n\n  deleteTodo = () => {\n    let { deleteIndex, deleteType, todos } = this.state;\n    if (deleteType === \"incomplete\") {\n      todos.incomplete.splice(deleteIndex, 1);\n    } else if (deleteType === \"complete\") {\n      todos.complete.splice(deleteIndex, 1);\n    }\n    this.setState({\n      todos,\n      isDeleting: false,\n      deleteIndex: -1,\n      deleteType: \"\"\n    },\n      () => this.saveTodos()\n    )\n  }\n\n  render() {\n    let { todos, newTodo, isEditing, modifyIndex, modifyType, deleteIndex, deleteType } = this.state;\n    return (\n      <>\n        <section className=\"container\">\n          <div className=\"heading\">\n            <img src={Laptop} alt=\"Laptop\" className=\"heading-img\" />\n            <h1 className=\"heading-title\">My TODO List</h1>\n          </div>\n          <div>Completed: <span className=\"completed-count\">{todos.complete.length} of {todos.complete.length + todos.incomplete.length}</span> items</div>\n          <form className=\"todo__add\" onSubmit={e => {\n            e.preventDefault();\n            this.addTodo();\n          }}>\n            <div className=\"todo__title-wrap\" id=\"js-label-add\">\n              <label htmlFor=\"js-new-task\" className=\"section__title section__title--add\">Add Item</label>\n            </div>\n            <input id=\"js-new-task\" onChange={e => this.setState({ newTodo: e.target.value })} className=\"text-input task__input--new\" type=\"text\" value={newTodo} />\n            <button id=\"js-add-button\" className=\"button\" type=\"submit\"><i className=\"material-icons icon__add\">add_circle</i></button>\n          </form>\n          <section className=\"todo__list\">\n            <div className=\"todo__title-wrap todo__title-wrap--todo\" id=\"js-todo\" style={{ marginBottom: \"0.2em\" }}>\n              <h3 className=\"section__title\">To-do</h3>\n            </div>\n            <ul id=\"js-incomplete-tasks\" className=\"list\">\n              {\n                todos.incomplete.length > 0\n                  ?\n                  todos.incomplete.map((todo, i) => (\n                    <li class={\n                      (isEditing && modifyIndex === i && modifyType === \"incomplete\")\n                        ?\n                        \"task is-editing\"\n                        :\n                        \"task\"\n                    } key={i}>\n                      <input type=\"checkbox\" checked={false} class=\"task__checkbox\" onChange={e => this.handleChange(\"incomplete\", i)} />\n                      <label class=\"task__title\">{todo}</label>\n                      <input type=\"text\" class=\"text-input task__input\" value={todo} onChange={e => {\n                        todos.incomplete[i] = e.target.value;\n                        this.setState({ todos },\n                          () => this.saveTodos()\n                        )\n                      }} />\n                      <button class=\"button task__delete\" onClick={e => this.openDelete(\"incomplete\", i)}>\n                        <i class=\"material-icons icon__delete\">delete</i>\n                      </button>\n                      <button class=\"button task__edit\" disabled={todo === \"\"}\n                        onClick={\n                          e => {\n                            (isEditing && modifyIndex === i && modifyType === \"incomplete\")\n                              ?\n                              this.resetEditFields()\n                              :\n                              this.openEdit(\"incomplete\", i)\n                          }\n                        }\n                      >\n                        {\n                          (isEditing && modifyIndex === i && modifyType === \"incomplete\")\n                            ?\n                            <i class=\"material-icons icon__edit\">playlist_add_check</i>\n                            :\n                            <i class=\"material-icons icon__edit\">mode_edit</i>\n                        }\n                      </button>\n                    </li>\n                  ))\n                  :\n                  <span style={{ color: \"grey\", fontSize: \"16px\" }}>No records found!</span>\n              }\n            </ul>\n          </section>\n          <section className=\"todo__done\">\n            <div className=\"todo__title-wrap\" id=\"js-completed\" style={{ marginBottom: \"0.2em\" }}>\n              <h3 className=\"section__title\">Completed</h3>\n            </div>\n            <ul id=\"js-completed-tasks\" className=\"list\">\n              {\n                todos.complete.length > 0\n                  ?\n                  todos.complete.map((todo, i) => (\n                    <li class=\"task\" key={i}>\n                      <input type=\"checkbox\" checked class=\"task__checkbox\" onChange={e => this.handleChange(\"complete\", i)} />\n                      <label class=\"task__title is-done\">{todo}</label>\n                      <input type=\"text\" class=\"text-input task__input\" />\n                      <button class=\"button task__delete\" onClick={e => this.openDelete(\"complete\", i)}>\n                        <i class=\"material-icons icon__delete\">delete</i>\n                      </button>\n                    </li>\n                  ))\n                  :\n                  <span style={{ color: \"grey\", fontSize: \"16px\" }}>No records found!</span>\n              }\n            </ul>\n          </section>\n        </section>\n        {\n          this.state.isDeleting\n            ?\n            <div class=\"overlay\">\n              <div class=\"alert\">\n                <p>Delete this item?</p>\n                <button class=\"button alert__button alert__button--no\" onClick={e => this.resetDeleteFields()}>No</button>\n                <button class=\"button alert__button alert__button--yes\" onClick={e => this.deleteTodo()}>Yes</button>\n              </div>\n            </div>\n            :\n            \"\"\n        }\n      </>\n    )\n  }\n}",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":109,"column":63,"nodeType":"22","messageId":"23","endLine":109,"endColumn":74},{"ruleId":"20","severity":1,"message":"24","line":109,"column":76,"nodeType":"22","messageId":"23","endLine":109,"endColumn":86},"no-native-reassign",["25"],"no-negated-in-lhs",["26"],"no-unused-vars","'deleteIndex' is assigned a value but never used.","Identifier","unusedVar","'deleteType' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]